{"expireTime":9007200839922140000,"key":"transformer-remark-markdown-ast-4214006ecde775eea28c2de83e0a4aaa-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"I have created many command line tools and scripts throughout my career. Though the importance of these applications vary greatly (some are vital to achieve certain business goals, while some are simple and may only be run once or twice), the core design of these applications should remain relatively the same.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":312,"offset":312},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":312,"offset":312},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"What do you mean by design?","position":{"start":{"line":4,"column":2,"offset":315},"end":{"line":4,"column":29,"offset":342},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":314},"end":{"line":4,"column":30,"offset":343},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":314},"end":{"line":4,"column":30,"offset":343},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Design in this case is the style in which the tool is coded, the way the tool is presented to the user, and the functionality the tool provides.","position":{"start":{"line":6,"column":1,"offset":345},"end":{"line":6,"column":145,"offset":489},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":345},"end":{"line":6,"column":145,"offset":489},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Coding Style","position":{"start":{"line":8,"column":3,"offset":493},"end":{"line":8,"column":15,"offset":505},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":491},"end":{"line":8,"column":17,"offset":507},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":491},"end":{"line":8,"column":17,"offset":507},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Commenting your code, writing self-explaining code, and using descriptive variable names are extremely important tenants to abide by when writing command line tools. This point is self-explanitory as it is not unique to command line tools. It is worth reiterating for two reasons, however. One reason is that the ability to have a general idea of what the tool does by looking at its code is invaluable. Another reason is that people often write sloppy code when writing quick, one-off scripts.","position":{"start":{"line":10,"column":1,"offset":509},"end":{"line":10,"column":495,"offset":1003},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":509},"end":{"line":10,"column":495,"offset":1003},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Presentation","position":{"start":{"line":12,"column":3,"offset":1007},"end":{"line":12,"column":15,"offset":1019},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":1005},"end":{"line":12,"column":17,"offset":1021},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":1005},"end":{"line":12,"column":17,"offset":1021},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Presentation of a command line tool is generally set by convention. Convention, in the world of command line tools, is key.","position":{"start":{"line":14,"column":1,"offset":1023},"end":{"line":14,"column":124,"offset":1146},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1023},"end":{"line":14,"column":124,"offset":1146},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let’s assume we are working with a command line tool called deploy","position":{"start":{"line":16,"column":1,"offset":1148},"end":{"line":16,"column":67,"offset":1214},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"app. When I type deploy","position":{"start":{"line":16,"column":68,"offset":1215},"end":{"line":16,"column":91,"offset":1238},"indent":[]}}],"position":{"start":{"line":16,"column":67,"offset":1214},"end":{"line":16,"column":92,"offset":1239},"indent":[]}},{"type":"text","value":"app —help I should be shown a help message with an example of how to use the tool and all available options that I have access to. This is a convention that has worked well for decades. It is something that users are used to, and it is something that is expected. Not following these conventions is not only lazy but it is dangerous. If I pass —help but the tool runs anyway, then that can cause a huge mess. Speaking of help messages, this is what one should look like…","position":{"start":{"line":16,"column":92,"offset":1239},"end":{"line":16,"column":564,"offset":1711},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1148},"end":{"line":16,"column":564,"offset":1711},"indent":[]}},{"type":"html","lang":"shell-session","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"shell-session\"><pre class=\"language-shell-session\"><code class=\"language-shell-session\"><span class=\"token output\">deploy_app - Uploads the latest version of 'app' to the server.\n\nUsage:\n  deploy_app\n  deploy_app -h | --help\n  deploy_app --version\n\nOptions:\n  -h --help     Show this screen.\n  --version     Show version.</span></code></pre></div>","position":{"start":{"line":18,"column":1,"offset":1713},"end":{"line":29,"column":4,"offset":1940},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Functionality","position":{"start":{"line":31,"column":3,"offset":1944},"end":{"line":31,"column":16,"offset":1957},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1942},"end":{"line":31,"column":18,"offset":1959},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1942},"end":{"line":31,"column":18,"offset":1959},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The final point I want to address is the functionality that the tool should provide. A command line tool should be able to be commanded. Giving users options is the key to creating a great command line tool. These options can be very minor, but they may mean the world for the people using the tool. For example, I recently created a tool to run automated tests on an application we were building. At the end of these tests, a slack message containing the results was sent out to a channel. Even though this feature was very useful, the option to —disable-slack was added to the tool to accomodate those who wanted those test results to be hidden for whatever reason. It is the little things that will make the users of your tool satisfied.","position":{"start":{"line":33,"column":1,"offset":1961},"end":{"line":33,"column":742,"offset":2702},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1961},"end":{"line":33,"column":742,"offset":2702},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I hope this post has inspired you to craft great command line tools, regardless of its size. Have you made a cool tool that uses these design principles? Reach out to me! I’d love to see it.","position":{"start":{"line":35,"column":1,"offset":2704},"end":{"line":35,"column":191,"offset":2894},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":2704},"end":{"line":35,"column":191,"offset":2894},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":36,"column":1,"offset":2895}}}}